{"version":3,"sources":["Movie .js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","summary","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","baseon","App","state","_renderingMoives","_this","movies","movie","Movie_","large_cover_image","id","_callAPI","fetch","then","potato","json","tomato","data","catch","error","console","log","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","sent","setState","stop","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiCA,SAASA,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAhC,KAGT,SAASK,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC7B,OAAOP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,kBAmB5CO,MApDf,SAAAC,GAAmD,IAAlCF,EAAkCE,EAAlCF,MAAOH,EAA2BK,EAA3BL,OAAQM,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,QACtC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAGpCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZS,EAAOE,IAAI,SAACf,EAAOgB,GAAR,OACVf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAGnCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACEiB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,OAAO,gBC+BJC,6MAhDbC,MAAQ,KAMRC,iBAAmB,WAYjB,OAXeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OACE5B,EAAAC,EAAAC,cAAC2B,EAAD,CACEpB,MAAOmB,EAAMnB,MACbH,OAAQsB,EAAME,kBACdd,IAAKY,EAAMG,GACXnB,OAAQgB,EAAMhB,OACdC,QAASe,EAAMf,eAOvBmB,SAAW,WACT,OAAOC,MACL,kEAECC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAG,GAAM,OAAIA,EAAOC,KAAKX,SAC3BY,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAGhCG,gCAAa,SAAAC,IAAA,IAAAjB,EAAA,OAAAkB,EAAA5C,EAAA6C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUvB,EAAKM,WADf,OACLL,EADKoB,EAAAG,KAEXT,QAAQC,IAAIf,GACZD,EAAKyB,SAAS,CACZxB,WAJS,wBAAAoB,EAAAK,SAAAR,yFA3BXS,KAAKV,8CAmCE,IACChB,EAAW0B,KAAK7B,MAAhBG,OACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAS,MAAQ,gBAC9BA,EAAS0B,KAAK5B,mBAAqB,kBA9C1B6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.032feaea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\n\r\nfunction Movie({ title, poster, genres, summary }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n\r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => (\r\n            <MovieGenre genre={genre} key={index} />\r\n          ))}\r\n        </div>\r\n        <div className=\"Movie__Summary\">\r\n          <LinesEllipsis\r\n            text={summary}\r\n            maxLine=\"3\"\r\n            ellipsis=\"...\"\r\n            trimRight\r\n            baseon=\"letters\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie__Genre\">{genre} </span>;\r\n}\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  summary: PropTypes.string.isRequired\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie \";\n\nclass App extends Component {\n  // Render : componentWillMount( ) > render( ) > componentDidMount( )\n  // Update : componentWillReciveProps( ) > shouldComponentUpdate( ) > componentWillUpdate( ) > render( ) > componentDidUpdate( )\n\n  state = {};\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _renderingMoives = () => {\n    const movies = this.state.movies.map(movie => {\n      return (\n        <Movie\n          title={movie.title}\n          poster={movie.large_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          summary={movie.summary}\n        />\n      );\n    });\n    return movies;\n  };\n\n  _callAPI = () => {\n    return fetch(\n      \"https://yts.lt/api/v2/list_movies.json?sort_by=rating&limit=30\"\n    )\n      .then(potato => potato.json())\n      .then(tomato => tomato.data.movies)\n      .catch(error => console.log(error));\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callAPI();\n    console.log(movies);\n    this.setState({\n      movies\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderingMoives() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}